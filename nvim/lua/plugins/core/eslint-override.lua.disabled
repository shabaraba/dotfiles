-- ESLint LSPを完全にオーバーライドする
return {
  "neovim/nvim-lspconfig",
  lazy = false,
  priority = 100,  -- 他のプラグインより早くロード
  config = function()
    -- nvim-lspconfigのセットアップより前に実行
    local lspconfig = require("lspconfig")
    local configs = require("lspconfig.configs")
    local util = require("lspconfig.util")
    
    -- ESLintの設定を完全にオーバーライド
    configs.eslint = {
      default_config = {
        cmd = { "vscode-eslint-language-server", "--stdio" },
        filetypes = {
          "javascript",
          "javascriptreact",
          "javascript.jsx",
          "typescript",
          "typescriptreact",
          "typescript.tsx",
          "vue",
          "astro",
        },
        settings = {
          validate = "on",
          packageManager = "npm",
          useESLintClass = false,
          codeAction = {
            disableRuleComment = {
              enable = true,
              location = "separateLine",
            },
            showDocumentation = {
              enable = true,
            },
          },
          codeActionOnSave = {
            enable = false,
            mode = "all",
          },
          format = true,
          quiet = false,
          onIgnoredFiles = "off",
          rulesCustomizations = {},
          run = "onType",
          problems = {
            shortenToSingleLine = false,
          },
          workingDirectory = {
            mode = "location",
          },
        },
        root_dir = function(fname)
          -- ここが重要: fnameの型を必ずチェック
          if fname == nil then
            return vim.fn.getcwd()
          end
          
          if type(fname) == "number" then
            -- バッファ番号が渡された場合
            local bufnr = fname
            -- バッファが有効かチェック
            if vim.api.nvim_buf_is_valid(bufnr) then
              fname = vim.api.nvim_buf_get_name(bufnr)
            else
              fname = vim.api.nvim_buf_get_name(0)
            end
          elseif type(fname) ~= "string" then
            -- その他の無効な型の場合
            fname = vim.api.nvim_buf_get_name(0)
          end
          
          -- 空文字列の場合の処理
          if fname == "" then
            return vim.fn.getcwd()
          end
          
          -- ESLint設定ファイルを探す
          local pattern = util.root_pattern(
            ".eslintrc",
            ".eslintrc.js",
            ".eslintrc.cjs",
            ".eslintrc.mjs",
            ".eslintrc.yaml",
            ".eslintrc.yml",
            ".eslintrc.json",
            "eslint.config.js",
            "package.json"
          )
          
          -- パターンマッチング
          local root = pattern(fname)
          if root then
            return root
          end
          
          -- Gitリポジトリのルートを探す
          root = util.find_git_ancestor(fname)
          if root then
            return root
          end
          
          -- 最終フォールバック
          return util.path.dirname(fname)
        end,
        handlers = {
          ["textDocument/publishDiagnostics"] = vim.lsp.with(
            vim.lsp.diagnostic.on_publish_diagnostics,
            {
              virtual_text = false,
              signs = true,
              underline = true,
              update_in_insert = false,
            }
          ),
        },
      },
    }
  end,
}